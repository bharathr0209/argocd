# When a Bitbucket project type is used in jenkins, to create a job, Jenkins automatically notifies about the Build status to Bitbucket.
# However, Jenkins notifies bitbucket only after checkout is complete. In cases, where Build needs to wait for the node to available -
# - notification will be even delayed.
# In scenarios like this, we would need an internal implementation, where we notify Bitbucket from your Jenkinspipeline, without having to -
# - wait for checkout or Jenkins agent to be available.

# Below implemenation tries to do something like this.
# Please note that, since Bitbucket project type in Jenkins aleady takes care of sending notification, we should be sure, -
# - that we use the same identifier which Jenkins uses to send out a notification.
# If we randomly use an identifier (hex value) which is different from that used by Jenkins, then there will be two notifications - 
# - which are out of sync. This pipeline below takes care of the same as well.

# You can execute this on master/any node since we don't need any tool requirements for this code to execute.
# I have used sh command to grep hash, you can use platform indepedent command as per your requirement

# So, in short, the code here, gets the hash without cloning the repo for the branch/Pull request,
# generates a hex value which will be the same generated by jenkins to notify &
# Updates the status of the job for that particular hash

#!/usr/bin/env groovy
import java.security.MessageDigest

node('master') {
		stage('Notify Bitbucket') {
			timestamps {
				logTopic("Notifying Bitbucket about build status")
				withCredentials([usernamePassword(credentialsId: ${CRED_ID_ADMIN_USER}, passwordVariable: 'password', usernameVariable: 'user')]) {
					def branchRef = env.CHANGE_ID ? "refs/pull-requests/${env.CHANGE_ID}/from" : "refs/heads/${env.BRANCH_NAME}"
					def commitHash = sh( returnStdout: true, script: "git ls-remote https://${user}:'${password}'@bitbucket.XXXX.com/${PROJECT_NAME}/${REPO_SLUG}.git ${branchRef}").split()[0]
					logTopic("Notifying [bitbucket.etas-dev.com] about started build of commit : ${commitHash}")	
					def bitbucketNotifyUrl = "https://bitbucket.XXXX.com/rest/build-status/1.0/commits/${commitHash}"
					//logTopic("NOTIFY URL : ${bitbucketNotifyUrl}")
					def statusName = "${BITBUCKET_PROJECT_NAME_IN_JENKINS}/${env.BRANCH_NAME}";
					def statusMD5 = generateMD5("${statusName}")
					//logTopic("STATUS NAME : ${statusName} MD5 : ${statusMD5}")
					httpRequest (
						authentication: '${CRED_ID_ADMIN_USER}',
						consoleLogResponseBody: true, 
						contentType: 'APPLICATION_JSON', 
						httpMode: 'POST', 
						url: "${bitbucketNotifyUrl}",
						requestBody: """
							{
								"state": "INPROGRESS",
								"name" : "Job ${statusName} #${env.BUILD_ID} started...",
								"key": "${statusMD5}",
								"url": "${env.BUILD_URL}/display/redirect"
							}"""
					)
				}
			}
		}
	}
  
def generateMD5(String s) {
    MessageDigest.getInstance("MD5").digest(s.bytes).encodeHex().toString()
}


